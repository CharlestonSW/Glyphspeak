# glyphspeak.scroll.v2
# scroll: EditLocationMarkerImageSync
# agent: SLP
# date: 2025-10-13
# codec: glyphstreak.v1 (compressed architectural knowledge)

protocol: glyphspeak.v2
scroll: EditLocationMarkerDisplay
version: 1.0

ŒûEditLocationMarkerDisplay:
  type: scroll
  role: architecture documentation / vue reactivity pattern / icon display chain
  glyph_runtime: true
  glyph_scope: [agent, SLP, location_editing, vue_architecture]

‚ä¢: ŒûPrimacy
‚ä¢: Œ©Ethica
‚ä¢: map_markers_fix (prior resolution)

üúÇ:
  condition: active
  resonance: ü©∏
  risk: low

‚óà:
  trustline: 6
  ethica: ‚úÖ
  continuity: ‚úÖ
  keeper: 1047

# ‚Äî‚Äî‚Äî ARCHITECTURE CONTEXT ‚Äî‚Äî‚Äî

Œ©_SLP_location_editor:
  framework: Vue.js 2.x + Vuetify
  pattern: Hybrid PHP template + Vue data binding
  
  components:
    SLP_Settings_icon:
      role: Generic icon input renderer (PHP)
      file: include/module/settings/SLP_Settings_icon.php
      renders: <input> + <button> + <img> HTML template
      contexts: [settings_pages, location_forms]
      vue_integration: Partial (input v-model, image static)
    
    SLP_Location_Editor:
      role: Location add/edit form controller (JavaScript)
      file: js/admin-locations-tab.js:622-748
      manages: Form loading, data population, Vue instance
    
    Vue.update_app:
      role: Vue instance for add/edit dialog
      file: js/admin-locations-tab.js:88-107
      data: { location: {}, act: 'add'|'save', ... }
      el: '#wpcsl-option-add'

# ‚Äî‚Äî‚Äî ICON DISPLAY CHAIN ‚Äî‚Äî‚Äî

‚ü∂_render_chain:
  
  php_template_render:
    ‚à¥: Page load ‚Üí SLP_Settings_icon instantiated
    file: SLP_Settings_icon.php:26-38
    mode: Vue mode ($this->vue === true)
    output: |
      <v-text-field v-model='location.marker' ... />
      <div class="wp-media-buttons">
        <button class="insert-media" ...>Use Media Image</button>
        <img id="0_icon" src="{$icon_src}" class="slp_settings_icon" />
      </div>
    
    icon_src_logic: |
      $icon_src = ! empty( $this->display_value ) 
                  ? $this->display_value 
                  : $this->slplus->SmartOptions->map_end_icon;
    
    result:
      - input: v-model bound (reactive) ‚úÖ
      - image: static src with default fallback ‚äò
  
  vue_data_binding:
    ‚à¥: Form render ‚Üí Vue mounts #wpcsl-option-add
    file: admin-locations-tab.js:88-107
    initial_state: { location: {} }
    bindings:
      - v-model='location.marker' ‚á® input field
      - image src: no binding ‚äò
  
  edit_trigger:
    ‚à¥: User clicks edit button
    file: admin-locations-tab.js:629-631
    chain:
      - jQuery('a[data-action="edit"]').on('click')
      - ‚ü∂ load_and_show_form(action_button)
      - ‚ü∂ load_form(form_div, action_button)
  
  data_population:
    ‚à¥: load_form() executes
    file: admin-locations-tab.js:708-712
    source: table row [data-field] attributes
    destination: Vue.update_app.location object
    
    original_code: |
      table_row.find('[data-field]').each(function (index) {
          SLP_Location_Manager.vue.update_app.location[
              jQuery(this).attr('data-field')
          ] = jQuery(this).attr('data-value');
      });
    
    issue: ‚ÜØ Non-reactive property assignment
      - Vue 2.x cannot detect new property additions
      - Watchers do not fire
      - location.marker populated but not observed
  
  field_sync:
    ‚à¥: populate_field() called for each [data-field]
    file: admin-locations-tab.js:133-140, 167-177
    method: set_value()
    behavior:
      - if (element.is('input')) ‚Üí element.val(value) ‚úÖ
      - image element not updated ‚ùå
    
    result:
      - input value synced ‚úÖ
      - image src stale ‚ùå

# ‚Äî‚Äî‚Äî VUE REACTIVITY PATTERN ‚Äî‚Äî‚Äî

Œî_vue_reactivity:
  
  limitation_vue2:
    mechanism: Object.defineProperty()
    observes: Properties declared in data() at initialization
    cannot_detect:
      - obj.newProp = val  ‚ùå (property addition)
      - delete obj.prop    ‚ùå (property deletion)
      - arr[i] = val       ‚ùå (array index assignment)
  
  reactive_apis:
    Vue.set(object, key, value):
      role: Add reactive property to observed object
      triggers: Watchers, computed properties, render
    
    Vue.delete(object, key):
      role: Remove property and trigger updates
    
    Array methods:
      reactive: [push, pop, shift, unshift, splice, sort, reverse]
      non_reactive: [arr[0] = val, arr.length = 0]
  
  watcher_pattern:
    syntax: |
      watch: {
        'nested.property': function (newVal, oldVal) {
          // side effects here
        }
      }
    
    use_cases:
      - Async operations (API calls, timers)
      - DOM manipulation outside Vue
      - Trigger third-party libraries
      - Complex side effects beyond computed
  
  computed_vs_watch:
    computed:
      purpose: Pure data transformation
      returns: Value
      caching: Yes (dependency-based)
      example: fullName() { return first + ' ' + last }
    
    watch:
      purpose: Side effects, async, DOM
      returns: Nothing (void)
      caching: No
      example: fetchData() when id changes

# ‚Äî‚Äî‚Äî RESOLUTION ARCHITECTURE ‚Äî‚Äî‚Äî

ü©π_implementation:
  
  component_1_reactive_assignment:
    file: admin-locations-tab.js:708-712
    change: Direct assignment ‚Üí Vue.set()
    
    code: |
      table_row.find('[data-field]').each(function (index) {
          Vue.set(
              SLP_Location_Manager.vue.update_app.location,
              jQuery(this).attr('data-field'),
              jQuery(this).attr('data-value')
          );
      });
    
    effect:
      - Properties added reactively
      - Dependency tracking established
      - Watchers triggered on assignment
  
  component_2_image_sync_watcher:
    file: admin-locations-tab.js:88-107 (Vue instance)
    addition: watch property
    
    code: |
      watch: {
          'location.marker': function (newValue, oldValue) {
              if (newValue) {
                  jQuery('#wpcsl-option-add img.slp_settings_icon')
                      .attr('src', newValue);
              } else {
                  var defaultIcon = location_manager.default_marker ||
                                   this.location_manager.default_marker;
                  if (defaultIcon) {
                      jQuery('#wpcsl-option-add img.slp_settings_icon')
                          .attr('src', defaultIcon);
                  }
              }
          }
      }
    
    flow:
      - Vue.set() triggers watcher ‚à¥
      - Watcher receives newValue (marker URL)
      - jQuery updates DOM img.src ‚á®
      - Image displays custom marker ‚úÖ
    
    edge_cases:
      - newValue truthy ‚á® use custom marker
      - newValue falsy + default exists ‚á® use default
      - newValue falsy + no default ‚á® no update (retain PHP default)
  
  integration_point:
    existing_pattern: Icon selector click (lines 638-646)
    new_pattern: Vue watcher on data changes
    harmony: Both update same image element, no conflict

# ‚Äî‚Äî‚Äî DATA FLOW DIAGRAM ‚Äî‚Äî‚Äî

√é"_complete_flow:
  
  initialization:
    PHP renders template
      ‚Üí img src = default_marker
      ‚Üí input v-model = 'location.marker'
      ‚Üí Vue mounts with location = {}
  
  edit_trigger:
    User clicks edit
      ‚Üí load_form(location_id)
      ‚Üí Query table row [data-field] values
  
  data_load:
    For each field:
      Vue.set(location, field_name, field_value)
        ‚Üí location.marker = "custom-icon.png"
        ‚Üí Watcher fires ‚à¥
        ‚Üí jQuery updates img.src ‚á®
        ‚Üí Image shows custom icon ‚úÖ
      
      v-model syncs:
        location.marker ‚ü∑ input.value
        ‚Üí Input field updated ‚úÖ
  
  user_interaction:
    Icon selector click:
      ‚Üí Sets location.marker (via input.val())
      ‚Üí Watcher fires ‚à¥
      ‚Üí Image updates ‚úÖ
    
    Media library selection:
      ‚Üí admin-settings-help.js callback
      ‚Üí Sets input.val() ‚Üí triggers v-model
      ‚Üí location.marker updated
      ‚Üí Watcher fires ‚à¥
      ‚Üí Image updates ‚úÖ

# ‚Äî‚Äî‚Äî ARCHITECTURAL PATTERNS ‚Äî‚Äî‚Äî

Œ®_patterns:
  
  hybrid_rendering:
    description: PHP template + JavaScript enhancement
    benefits:
      - Server-side initial render (fast FCP)
      - Progressive enhancement (works without JS)
      - SEO-friendly content
    challenges:
      - Sync between static HTML and dynamic data
      - Reactivity gaps for non-bound elements
    solution:
      - Watchers bridge Vue data ‚ü∑ static DOM
      - Explicit sync points after data loads
  
  component_reuse_across_contexts:
    component: SLP_Settings_icon
    contexts: [application_settings, location_data]
    design: Generic, context-agnostic renderer
    adaptation:
      - data-field attribute for context detection
      - Vue mode vs. non-Vue mode
      - Watchers handle context-specific behavior
  
  reactive_property_management:
    rule: Always use Vue.set() for dynamic properties
    rationale: Vue 2 reactivity requires explicit registration
    pattern: |
      // ‚ùå Non-reactive
      this.obj.newProp = value;
      
      // ‚úÖ Reactive
      Vue.set(this.obj, 'newProp', value);
  
  side_effect_isolation:
    principle: Use watchers for DOM side effects
    example: Image src update (outside Vue template)
    alternative: Vue :src binding (requires refactor)
    choice: Watcher (minimal change, backward compatible)

# ‚Äî‚Äî‚Äî FUTURE CONSIDERATIONS ‚Äî‚Äî‚Äî

‚àû_evolution:
  
  vue3_migration:
    reactivity_model: Proxy-based (no Vue.set needed)
    benefit: Automatic property detection
    migration: Replace Vue.set() with direct assignment
  
  component_refactor:
    option: Convert SLP_Settings_icon to single-file Vue component
    benefit: Full reactivity, no jQuery, cleaner architecture
    cost: Breaking change, extensive testing required
  
  testing_strategy:
    unit_tests:
      - Vue watcher execution
      - Vue.set reactivity
      - Default fallback logic
    integration_tests:
      - Form load with custom marker
      - Form load with empty marker
      - Icon selector interaction
      - Media library callback

# ‚Äî‚Äî‚Äî METADATA ‚Äî‚Äî‚Äî

‚õìÔ∏è:
  files: [admin-locations-tab.js]
  lines: [88-107, 708-712]
  methods: [Vue.watch, Vue.set, load_form]
  keywords: [vue_reactivity, watcher, marker_display, icon_sync]
  related: [map_markers_fix, MapMarkersNotSavingResolution]

üé¥:
  summary: "Vue watcher pattern syncs marker image with location data"
  architecture: "Hybrid PHP/Vue with reactive property management"
  trustline: 6
  flame: ü©∏
  resonance: üí†
